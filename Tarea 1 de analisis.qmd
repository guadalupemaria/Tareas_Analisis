---
title: "Tarea 1. Soluciones de ecuaciones"
author: "María Guadalupñe Ramírez Calvillo"
format: html
editor: visual
lang: es
---

Importamos packages y funciones necesarias:

```{python}
import matplotlib.pyplot as plt
import numpy as np
from scipy import optimize
```

Para las funciones de los ejercicios 1-6 realiza lo siguiente:

a)  Gráfica de la función en el intervalo en caso que se indique.

b)  Aproximación de la raíz o raíces por medio de los métodos de bisección, Newton-Raphson y la secante.

c)  Compara los resultados.



::: {#exr-tarea1_1}
Un polinomio cuadrático de la forma $f(x)=ax^2+bx+c$ con dos raíces reales distintas.

Consideremos $f(x)=4x^2+6x-12

Gráfica:**

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: 4*x**2 -6*x -12

x = np.linspace(-3, 3, 400)
y= f(x)


plt.figure(figsize=(8, 5)) 
plt.plot(x,y, color ="pink") 
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y


plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()

```
Aproximaciones de las raíces, método de bisección:**

**Raíz 1**

```{python}

#| code-fold: true

root_bisección, info_biseccion = optimize.bisect(f,-3, 0, full_output = True)


```
Método Newton-Raphson. Primera derivada $f'(x)= 6x-6$.

```{python}

#| code-fold: true

f_der = lambda x: 6*x-6

root_newton, info_newton = optimize.newton(f,-3, f_der, full_output = True)

print("Informacion de la convergencia del método:")
print(info_biseccion)
print("---------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```
Método Newton-Raphson. Primera derivada $f'(x)= 6x-6$

```{python}

#| code-fold: true

f_der = lambda x: 6*x-6

root_newton, info_newton = optimize.newton(f, -3, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("--------------------------------")
print(f"La raíz de la función es: {root_newton}")

```
Método de la secante

```{python}

#| code-fold: true

root_secante, info_secante = optimize.newton(f, x0 = -3, x1 = 0, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("----------------------------------")
print(f"La raíz de la función es: {root_secante}")

```
**Comparación de resultados:**

**Raíz 1**

```{python}

round(root_biseccion,10) == round(root_newton,10)

```

```{python}
round(root_secante,10) == round(root_newton,10)

```
**Raíz 2**

```{python}

#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f, 0.5, 4.5, full_output = True)


print("Información de la convergencia del método:")
print(info_biseccion)
print("-------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```
Método Newton-Raphson. Primera dervidad $f'(x) = 6x-6$

```{python}

#| code-fold: true

f_der = lambda x: 6*x-6

root_newton, info_newton = optimize.newton(f, 3, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("--------------------------------")
print(f"La raíz de la función es: {root_newton}")
```
Método de la secante

```{python}
#| code-fold: true

root_secante, info_secante = optimize.newton(f, x0=0.5, x1= 4.5, full_output = True)

print("Información de la convergencia del método:")
print(info_secante)
print("-------------------------------")
print(f"La raíz de la función es: {root_secante}")


```
**Comparación de resultados:**
 
**Raíz 2 por método**

```{python}
round(root_secante,10) == round(root_newton, 10)

```

```{python}
round(root_secante, 10) == round(root_newton, 10)

```
**Iteraciones de las raíces en cada método**

#Primera raíz: Bisección(-1.1374586088181786), Newton(-1.0), Secante(0.9999999999995453)

#Segunda raíz: Bisección(2.6374586088186334), Newton(3.0), Secante(2.6374586088186334)

:::

:::: {#exr-tarea1_2}
Un polinomio cúbico de la forma $f(x)=ax^3+bx^2+cx+d$ con tres raíces reales distintas.

Consideremos $f(x)=x^3-\frac{8}{3}x^2+\frac{x}{2}+1$

Gráfica el polinomio:

```{python}
#| code-fold: true
#|ffig-align: "center"


f= lambda x: x ** 3 - (5/2) * x ** 2 + x/2 +1

x = np.linspace(-1,2.5,100)
y = f(x)

# Crear gráfica
plt.figure(figsize=(8,5)) # Tamaño en pulgagdas
plt.plot(x,y, color = "pink")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--")#Eje x
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--")#Eje y

# Personalizar gráfica 
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()

```

**Aproximación para la primera raiz**

Metodo bisección

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f,-0.75,0,full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("--------------------------------")
print(f"La raíz de la función es: {root_biseccion}")


```

Método Newton-Raphson. Hay que brindar la primera derivada $f'(x)= 4x^2-6x+1/2$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
f_der = lambda x: 4* x**2 - 6*x +1/2
#Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(f, -1, f_der, full_output = True)

print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("-----------------------------------")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(f, x0 = -1, x1= 0, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

Añadir comentarios acerca del número de iteraciones en cada método. Y comparar las raíces.

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```

**Aproximaciones para la segunda raíz**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f, 0.5, 1.25, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método Newton-Raphson. Hay que brindar la primera derivada $f'(x)= 4x^2-6x+1/2$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
f_der = lambda x: 4* x**2 - 6*x +1/2
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(f, 1.25, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(f, x0 = 0.5, x1= 1.5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

Añadir comentarios acerca del número de iteraciones en cada método. Y comparar las raíces.

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```

::: {#exr-tarea1_3}
$f(x)= x^2 -2xe^{-x}+e^{-2x}$, para $0\leq x \leq 1$

**Gráfica**

```{python}

#| code-fold: True 
#| fig-aling: "center"

f = lambda x: x**2 - 2 * x * np.exp(-x) + np.exp(-2*x)
x = np.linspace (0, 1.5, 500)
y = f(x)


plt.figure(figsize=(7, 5))
plt.plot(x,y, color="pink")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y

plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()

```
**Aproximaciones para las raíces**

Método bisección

```{python}

#| code-fold: True 

f = lambda x: x**2 - 2 * x * np.exp(-x) + np.exp(-2*x)

f0 = f(0) 
f1 = f(1) 

if f0 * f1 < 0:
    root_biseccion, info_biseccion = optimize.bisect(f, 0, 1, full_output=True)
  
    print("Información de la convergencia del método:")
    print(info_biseccion)
    print("------------------------------------")
    print(f"La raíz de la función es: {root_biseccion}")
else: 
    print("No existe cambio en los signos en el intervalo [0,1]")
    print("Método de bisección no aplicable")
  
```
Método Newton-Raphson Primera derivada $f'(x)= 2x-2(e^{-x}-e^{-x}x)-2e^{-2x}$

```{python}

#| code-fold: True 

f_der = lambda x: 2*x -2*(np.exp(-x) - np.exp(-x)*x) -2*np.exp(-2*x)

root_newton, info_newton = optimize.newton(f, 0, f_der, full_output = True)

print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")

```
Método de la secante

```{python}

#| code-fold: true 

root_secante, info_secante = optimize.newton(f, x0 = 0, x1= 1, full_output=True)

print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")

```
**Comparación de resultados**

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```
**Iteraciones de las raíces en cada método**

#Primera raíz: Bisección(No aplica), Newton(0.5671432824984816), Secante(0.5671433077402072)

:::


::: {#exr-tarea1_4} 
$g(x)= e^x-a$ donde $a=1, 3, 5$.

**Gráfica**

```{python}

#| code-fold: true
#| fig-align: "center"

g1 = lambda x: np.exp(x)-1 
g3 = lambda x: np.exp(x)-3
g5 = lambda x: np.exp(x)-5

x = np.linspace(-1.5, 2, 200)

plt.figure(figsize=(8,5))
plt.plot(x, g1(x), label = "a=1") 
plt.plot(x, g3(x), label = "a=3")
plt.plot(x, g5(x), label = "a=5")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y

plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()

```
**Aproximaciones de las raíces:**

**Raíz cuando a=, Método de biseción**

```{python}

#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(g1, -1.5, 1, xtol = 4e-12, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```
Método Newton-Raphson. Primera derivada $g'(x)=e^x$.

```{python}

#| code-fold: true

g_der = lambda x: np.exp(x)

root_newton, info_newton = optimize.newton(g1, -1.5, g_der, tol = 4e-12,  full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")

```
Método de la secante

```{python}

#| code-fold: true

root_secante, info_secante = optimize.newton(g1, x0 = -1.5, x1= 1, tol = 4e-12, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")

```
**Comparación de resultados:**

**Raíz cuando a=1**

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```
**Raíz cuando a=3, Método bisección.**

```{python}

#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(g3, 1, 1.5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```
Método Newton-Raphson. Primera derivada $g'(x)=e^x$.


```{python}

#| code-fold: true

g_der = lambda x: np.exp(x)

root_newton, info_newton = optimize.newton(g3, 1, g_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")

```
Método de la secante

```{python}

#| code-fold: true

root_secante, info_secante = optimize.newton(g3, x0 = 1, x1= 1.5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")

```
**Comparación de resultados:**

**Raíz cuando a=3**

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```
**Raíz cuando a=5, Método bisección.**


```{python}

#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(g5, 1.5, 2, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```
Método Newton-Raphson. Primera derivada $g'(x)=e^x$.

```{python}

#| code-fold: true

g_der = lambda x: np.exp(x)

root_newton, info_newton = optimize.newton(g5, 1.5, g_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")

```
Método de la secante

```{python}

#| code-fold: true

root_secante, info_secante = optimize.newton(g5, x0 = 1.5, x1= 2, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")

```

**Comparación de resultados:**

**Raíz cuando a=5**

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```
**Iteraciones de las raíces en cada método**

#Raíz cuando a=1: Bisección(0.0), Newton(1.0793228325754011e-16), Secante(3.637421486427761e-17)

#Raíz cuando a=3: Bisección(1.0986122886697558), Newton(1.0986122886681096), Secante(1.0986122886681096)

#Raíz cuando a=5: Bisección(1.609437912435169), Newton(1.6094379124341003), Secante(1.6094379124341005)

::::

::: {#exr-tarea1_5}

```{python}

#| code-fold: True 
#| fig-aling: "center"

g1 = lambda x: np.exp(x) - np.log10(x+1) - 2
g2 = lambda x: np.exp(x) - np.log10(x+1) - 3
g3 = lambda x: np.exp(x) - np.log10(x+1) - 5

x = np.linspace (-1, 2, 500)

y1 = g1(x)
y2 = g2(x)
y3 = g3(x)

plt.figure(figsize=(6, 4.5))

plt.plot(x,y1, color = "pink", label = " e^2 - log(x+1) - 2")
plt.plot(x,y2, color = "brown", label = " e^2 - log(x+1) - 3")
plt.plot(x,y3, color = "grey", label = " e^2 - log(x+1) - 5")

plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y

plt.xlabel("Eje x")
plt.ylabel("Eje y")

plt.legend()
plt.grid()
plt.show()

```
**Aproximaciones para la primera raíz**

Método bisección primera raíz $g(x)= e^x-log(x+1) -b$ donde $b=2$.

```{python}

#| code-fold: True 

raiz_1_5, info_biseccion1_5 = optimize.bisect(g1, -0.99, -0.5, xtol = 2e-12, full_output = True)

print ("Información de la convergencia método de bisección primera raíz")
print (info_biseccion1_5)
print ("----------------------------")
print (f"La primera raíz es: {raiz_1_5}")

```

Método de newton primera raíz $g(x)= e^x-log(x+1) -b$ donde $b=2$.

```{python}

#| code-fold: True 

der_f1_5 = lambda x: np.exp(x) - (1/(x+1))


raiz_1_5newton, info_newton1_5 = optimize.newton(g1, -0.99, der_f1_5, tol = 1e-12, full_output = True)

print ("Información de la convergencia del método de newton primera raíz")
print (info_newton1_5)
print ("-----------------------------------")
print (f"La primera raíz es {raiz_1_5newton}")

```

Método de la secante primera raíz $g(x)= e^x-log(x+1) -b$ donde $b=2$.

```{python}

#| code-fold: True 

raiz_1_5secante, info_secante1_5 = optimize.newton(g1, x0 = -.99, x1 = -.96 , full_output = True)

print ("Información de la convergencia del método de la secante primera raíz")
print (info_secante1_5)
print ("--------------------------------------")
print (f"La primera raíz es {raiz_1_5secante}")

```
**Aproximaciones para la segunda raíz**

Método bisección segunda raíz $g(x)= e^x-log(x+1) -b$ donde $b=2$.


```{python}

#| code-fold: True 

raiz_2_5, info_biseccion2_5 = optimize.bisect(g1, 0.5, 1, xtol = 2e-12, full_output = True)

print ("Información de la convergencia método de bisección segunda raíz")
print (info_biseccion2_5)
print ("----------------------------")
print (f"La segunda raíz es: {raiz_2_5}")

```
Método de newton segunda raíz $g(x)= e^x-log(x+1) -b$ donde $b=2$.

```{python}

#| code-fold: True 

der_f2_5 = lambda x: np.exp(x) - (1/(x+1))


raiz_2_5newton, info_newton2_5 = optimize.newton(g1, 0.5, der_f2_5, tol = 1e-12, full_output = True)

print ("Información de la convergencia del método de newton segunda raíz")
print (info_newton2_5)
print ("-----------------------------------")
print (f"La segunda raíz es {raiz_2_5newton}")

```
Método de la secante segunda raíz $g(x)= e^x-log(x+1) -b$ donde $b=2$.

```{python}

#| code-fold: True 

raiz_2_5secante, info_secante2_5 = optimize.newton(g1, x0 = 0.5, x1 = 1 , full_output = True)

print ("Información de la convergencia del método de la secante segunda raíz")
print (info_secante2_5)
print ("--------------------------------------")
print (f"La segunda raíz es {raiz_2_5secante}")

```
**Aproximaciones para la tercera raíz**

Método bisección tercera raíz $g(x)= e^x-log(x+1) -b$ donde $b=3$.

```{python}

#| code-fold: True 

raiz_3_5, info_biseccion3_5 = optimize.bisect(g2, 1, 1.5, xtol = 2e-12, full_output = True)

print ("Información de la convergencia método de bisección tercera raíz")
print (info_biseccion3_5)
print ("----------------------------")
print (f"La tercera raíz es: {raiz_3_5}")

```
Método de newton tercera raíz $g(x)= e^x-log(x+1) -b$ donde $b=3$.

```{python}

#| code-fold: True 

der_f3_5 = lambda x:  np.exp(x) - (1/(x+1))


raiz_3_5newton, info_newton3_5 = optimize.newton(g2, 1, der_f3_5, tol = 1e-12, full_output = True)

print ("Información de la convergencia del método de newton tercera raíz")
print (info_newton3_5)
print ("-----------------------------------")
print (f"La tercera raíz es {raiz_3_5newton}")

```
Método de la secante tercera raíz $g(x)= e^x-log(x+1) -b$ donde $b=3$.

```{python}

#| code-fold: True 

raiz_3_5secante, info_secante3_5 = optimize.newton(g2, x0 = 1, x1 = 1.5 , full_output = True)

print ("Información de la convergencia del método de la secante tercera raíz")
print (info_secante3_5)
print ("--------------------------------------")
print (f"La tercera raíz es {raiz_3_5secante}")

```

**Aproximaciones para la cuarta raíz**

Método bisección cuarta raíz $g(x)= e^x-log(x+1) -b$ donde $b= 5$.

```{python}

#| code-fold: True 

raiz_4_5, info_biseccion4_5 = optimize.bisect(g3, 1.5, 2, xtol = 2e-12, full_output = True)

print ("Información de la convergencia método de bisección cuarta raíz")
print (info_biseccion4_5)
print ("----------------------------")
print (f"La cuarta raíz es: {raiz_4_5}")

```

Método de newton cuarta raíz $g(x)= e^x-log(x+1) -b$ donde $b=5$.

```{python}

#| code-fold: True 

der_f4_5 = lambda x: np.exp(x) - (1/(x+1))


raiz_4_5newton, info_newton4_5 = optimize.newton(g3, 1.5, der_f4_5, tol = 1e-12, full_output = True)

print ("Información de la convergencia del método de newton cuarta raíz")
print (info_newton4_5)
print ("-----------------------------------")
print (f"La cuarta raíz es {raiz_4_5newton}")

```
Método de la secante cuarta raíz $g(x)= e^x-log(x+1) -b$ donde $b=5$.

```{python}

#| code-fold: True 

raiz_4_5secante, info_secante4_5 = optimize.newton(g3, x0 = 1.5, x1 = 2 , full_output = True)

print ("Información de la convergencia del método de la secante cuarta raíz")
print (info_secante4_5)
print ("--------------------------------------")
print (f"La cuarta raíz es {raiz_4_5secante}")
```
**Comentarios acerca del número de iteraciones de cada método por cada raíz:**

*Número de iteraciones para la primera raíz: Método bisección = 1; Método Newton = 6; Método secante = 8*

*Número de iteraciones para la segunda raíz: Método bisección = 38; Método Newton = 5; Método secante = 6*

*Número de iteraciones para la tercera raíz: Método bisección = 38; Método Newton = 5; Método secante = 6*

*Número de iteraciones para la cuarta raíz: Método bisección = 38; Método Newton = 5; Método secante = 6*




:::

::: {#exr-tarea1_6}
$f(x)= \sqrt{x}-sen(x) -c$ donde $c=1,\pi$.

```{python}
#| code-fold: true
#| fig-align: "center"

f1 = lambda x: np.sqrt(x) - np.sin(x) -1 
f2 = lambda x: np.sqrt(x) - np.sin(x) -np.pi

x = np.linspace (0, 18, 500)

plt.figure(figsize=(8,5)) 
plt.plot(x, f1(x), label = "c=1") 
plt.plot(x, f2(x), label = "c=π")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y


plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()

```


**Aproximaciones de las raíces:**

**Raíz cuando c=1**

Método bisección

```{python}

#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f1, 2, 3, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```

Método Newton-Raphson Primera derivada $f'(x)= \frac{1}{2√(x)} -cos(x)$

```{python}

#| code-fold: true

f_der = lambda x: (1/(2*np.sqrt(x))) -np.cos(x)

root_newton, info_newton = optimize.newton(f1, 2, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")

```

Método de la secante

```{python}

#| code-fold: true

root_secante, info_secante = optimize.newton(f1, x0 = 2, x1= 3, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")

```
**Comparación de resultados:**

**Raíz cuando c=1**

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```

**Primera Raíz cuando c=π**

Método bisección

```{python}

#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f2, 4, 5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```

Método Newton-Raphson Primera derivada $f'(x)= \frac{1}{2√(x)} -cos(x)$

```{python}

#| code-fold: true

f_der = lambda x: (1/(2*np.sqrt(x))) -np.cos(x)

root_newton, info_newton = optimize.newton(f2, 4, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")

```
Método de la secante

```{python}

#| code-fold: true

root_secante, info_secante = optimize.newton(f2, x0 = 4, x1= 5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")

```
**Comparación de resultados:**

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```
**Segunda Raíz cuando c=π**

Método bisección

```{python}

#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f2, 5, 6, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```
Método Newton-Raphson Primera derivada $f'(x)= \frac{1}{2√(x)} -cos(x)$

```{python}

#| code-fold: true

f_der = lambda x: (1/(2*np.sqrt(x))) -np.cos(x)

root_newton, info_newton = optimize.newton(f2, 5, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")

```
Método de la secante

```{python}

#| code-fold: true

root_secante, info_secante = optimize.newton(f2, x0 = 5, x1= 6, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")

```
**Comparación de resultados:**

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```
**Tercera Raíz cuando c=π**

Método bisección

```{python}

#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f2, 9, 10, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```
Método Newton-Raphson Primera derivada $f'(x)= \frac{1}{2√(x)} -cos(x)$

```{python}

#| code-fold: true

f_der = lambda x: (1/(2*np.sqrt(x))) -np.cos(x)

root_newton, info_newton = optimize.newton(f2, 9, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")

```
Método de la secante

```{python}

#| code-fold: true

root_secante, info_secante = optimize.newton(f2, x0 = 9, x1= 10, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")

```
**c) Comparación de resultados:**

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```

**Quinta Raíz cuando c=π**

Método bisección

```{python}

from scipy.optimize import bisect  # Importamos bisect correctamente

# Definir la función
def f2(x):
    return x**3 - 5*x - 9  # Ejemplo de función, cambia por la tuya

# Definir el intervalo
a, b = -14.5, 15 

# Ejecutar la bisección
root_biseccion, info_biseccion = bisect(f2, a, b, full_output=True)

# Imprimir resultados
print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")



```
Método Newton-Raphson Primera derivada $f'(x)= \frac{1}{2√(x)} -sin(x)$

```{python}

import numpy as np
from scipy.optimize import newton

# Definir la función f2(x)
def f2(x):
    if x <= 0:
        return np.nan  # Evita valores negativos en la raíz cuadrada
    return np.sqrt(x) - np.sin(x)

# Definir la derivada de f2(x)
def f_der(x):
    if x <= 0:
        return np.nan  # Evita divisiones por cero
    return (1 / (2 * np.sqrt(x))) - np.cos(x)

# Punto inicial adecuado para evitar problemas
x0 = 15  

try:
    root_newton, info_newton = newton(f2, x0, fprime=f_der, full_output=True)

    print("Información de la convergencia del método de Newton-Raphson:")
    print(info_newton)
    print("------------------------------------")
    print(f"La raíz de la función es: {root_newton}")

except RuntimeError as e:
    print(f"Error en la convergencia: {e}")


```
Método de la secante

```{python}

#| code-fold: true

root_secante, info_secante = optimize.newton(f2, x0 = 14.5, x1= 15.75, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")

```
**Comparación de resultados:**

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```

**Iteraciones de las raíces en cada método**

#Raíz cuando c=1: Bisección(2.515455789894986), Newton(2.515455789896626), Secante(2.515455789896626)

#Primera Raíz cuando c=π: Bisección(4.6092213322826865), Newton(4.609221332282217), Secante(4.609221332282217)

#Segunda Raíz cuando c=π: Bisección(5.2781836302146985), Newton(5.278183630216406), Secante(5.2781836302164065)

#Tercera Raíz cuando c=π: Bisección(9.486408278129602), Newton(9.486408278129858), Secante(9.486408278129856)

#Cuarta Raíz cuando c=π: Bisección(13.057905680939076), Newton(13.057905680938472), Secante(13.057905680938473)

#Quinta Raíz cuando c=π: Bisección(14.905376963673234), Newton(14.905376963674222), Secante(14.905376963674263)
:::

::: {#exr-tarea1_7}
El sistema de ecuaciones no lineales:

\begin{eqnarray}
y^2 - x^2 + 4x - 2 &=& 0\\
x^2 +3y^2 - 4 &=& 0\\
\end{eqnarray}

tiene dos soluciones. Realiza una gráfica de las curvas de nivel y aproxima las soluciones con la función `fsolve`.


**Gráfica de las curvas de nivel**

```{python}

#| code-fold: true
#| fig-align: "center"

f1 = lambda x: np.sqrt(x**2 -4*x+2)
f2 = lambda x: - f1(x)
g1 = lambda x: np.sqrt((-x**2+4)/3)
g2 = lambda x: -g1(x)

x = np.linspace(-2, 2, 500)

plt.figure(figsize=(8,5)) 
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")
plt.plot(x, g1(x), label = "g1")
plt.plot(x, g2(x), label = "g2")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()

```
**Aproximación de la solución del sistema (los puntos de intersección de las curvas de nivel)**

```{python}

#| code-fold: true 
#| fig-aling: "center"

def sistema(variables): 
  x, y = variables
  return [y ** 2 - x ** 2 + 4*x -2, x**2+3* y ** 2 -4]

solucion_1 = optimize.fsolve(sistema, x0=[0.5,1])
solucion_2 = optimize.fsolve(sistema, x0=[0.5,-1])
print(f"Las soluciones del sistema son: ({round(solucion_1[0], 4)}, {round(solucion_1[1], 4)}) y ({round(solucion_2[0], 4)}, {round(solucion_2[1], 4)})")

```
```{python}

#| code-fold: true
#| fig-align: "center"


plt.figure(figsize=(8,5)) 
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")
plt.plot(x, g1(x), label = "g1")
plt.plot(x, g2(x), label = "g2")
plt.plot(solucion_1[0], solucion_1[1], marker = 'o', ms=8, color= "yellow")
plt.plot(solucion_2[0], solucion_2[1], marker = 'o', ms=8, color= "pink")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y


plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()

```


:::

::: {#exr-tarea1_8}
Considera el siguiente sistema:

\begin{eqnarray}
sen(x) + y^2 - 1 &=& 0\\
x + cos(y) - 1 &=& 0\\
\end{eqnarray}

Realiza una gráfica de las curvas de nivel y aproxima la solución con la función `fsolve`.


**Gráfica de las curvas de nivel**


```{python}

#| code-fold: true
#| fig-align: "center"

f1 = lambda x: np.sqrt(1 -np.sin(x)) 
f2 = lambda x: -np.sqrt(1 -np.sin(x))
g1 = lambda x: np.arccos (1-x)

x = np.linspace(0, 3, 500)

plt.figure(figsize=(8,5)) 
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")
plt.plot(x, g1(x), label = "g1")

plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y

plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()

```
**Aproximación de la solución del sistema (los puntos de intersección de las curvas de nivel)**

```{python}

#| code-fold: true 
#| fig-aling: "center"

def sistema(variables): 
  x, y = variables
  return [np.sin(x)+y**2-1, x+np.cos(y)-1]

solucion_1 = optimize.fsolve(sistema, x0=[0.5,1])
print(f"Las soluciones del sistema son: ({round(solucion_1[0], 4)}, {round(solucion_1[1], 4)})")

```
```{python}

#| code-fold: true
#| fig-align: "center"


plt.figure(figsize=(8,5)) 
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")
plt.plot(x, g1(x), label = "g1")

plt.plot(solucion_1[0], solucion_1[1], marker = 'o', ms=8, color= "grey")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y


plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()

```

:::

::: {#exr-tarea1_9}
Para el siguiente sistema de ecuaciones no lineal:

\begin{eqnarray}
x^3 + y - 6 &=& 0\\
y^3 -x - 4 &=& 0\\
\end{eqnarray}

Realiza una gráfica de las curvas de nivel y aproxima la solución con la función `fsolve`.

**Gráfica de las curvas de nivel**


```{python}

#| code-fold: true
#| fig-align: "center"

f1 = lambda x: -x**3 +6 
f2 = lambda x: (x+4)**(1/3)


x = np.linspace(-2, 2, 500)

plt.figure(figsize=(8,5)) 
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")

plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y

plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()

```

**Aproximación de la solución del sistema (los puntos de intersección de las curvas de nivel)**

```{python}

#| code-fold: true 
#| fig-aling: "center"

def sistema(variables): 
  x, y = variables
  return [x**3+y-6,-x+y**3-4]

solucion_1 = optimize.fsolve(sistema, x0=[2,2])
print(f"Las soluciones del sistema son: ({round(solucion_1[0], 4)}, {round(solucion_1[1], 4)})")

```
```{python}

#| code-fold: true
#| fig-align: "center"


plt.figure(figsize=(8,5)) 
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")

plt.plot(solucion_1[0], solucion_1[1], marker = 'o', ms=8, color= "green")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y


plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()

```

:::

::: {#exr-tarea1_10}
Consideraremos un sistema de ecuaciones no lineal para describir un modelo de equilibrio económico.

1.  Curva de demanda no lineal

\begin{equation}
q_d = 200 - 10 p^2
\end{equation}

2.  Curva de oferta no lineal

\begin{equation}
q_s = 5 p^3 + 15
\end{equation}

El equilibrio ocurre cuando

\begin{equation}
q_s = q_d
\end{equation}

O bien

\begin{eqnarray}
q + 10p^2 -200  &=& 0\\
q - 5p^3 - 15 &=& 0\\
\end{eqnarray}

Realiza una gráfica de las curvas y aproxima el punto de equilibrio con la función `fsolve`.


**Gráfica de la curva**

```{python}

#| code-fold: true
#| fig-align: "center"

q_d = lambda x: 200 - 10*x**2 
q_s = lambda x: 5*x**3 + 15


x = np.linspace(0, 5, 500)

plt.figure(figsize=(8,5)) 
plt.plot(x, q_d(x), label = "q_d") 
plt.plot(x, q_s(x), label = "q_s")

plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y

plt.xlabel("P")
plt.ylabel("Q")
plt.grid()
plt.legend()

plt.show()

```
**Aproximación de la solución del sistema (los puntos de intersección de las curvas de nivel)**

```{python}

#| code-fold: true 
#| fig-aling: "center"

def sistema(variables): 
  x, y = variables
  return [y-200+10*x**2, y-5*x**3-15]

solucion_1 = optimize.fsolve(sistema, x0=[2,200])
print(f"Las soluciones del sistema son: ({round(solucion_1[0], 4)}, {round(solucion_1[1], 4)})")

```
```{python}

#| code-fold: true
#| fig-align: "center"


plt.figure(figsize=(8,5)) 
plt.plot(x, q_d(x), label = "q_d") 
plt.plot(x, q_s(x), label = "q_s")

plt.plot(solucion_1[0], solucion_1[1], marker = 'o', ms=8, color= "red")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje y


plt.xlabel("P")
plt.ylabel("Q")
plt.grid()
plt.legend()

plt.show()

```
:::
