---
title: "Tarea 6. Ecuaciones diferenciales ordinarias."
author: "Maria Guadalupe Ramirez Calvillo"
format: 
  html:
    grid: 
      body-width: 1000px
editor: visual
jupyter: python3
---

Packages requeridos:

```{python}
#| code-fold: true

import numpy as np
import matplotlib.pyplot as plt
#Para instalar plotly hay que escribir en la terminal: py -m pip install plotly
import plotly.graph_objects as go
from scipy import integrate
```

# Ejercicio 1

La Ley de Enfriamiento de Newton establece que la tasa de enfriamiento de un objeto es proporcional a la diferencia de temperatura entre el objeto y su entorno. Supongamos que $t$ es el tiempo, $T$ es la temperatura del objeto, y $T_s$ es la temperatura del entorno. La siguiente ecuación diferencial describe la Ley de Newton:

$$
\frac{dT}{dt} = k(T - T_s),
$$

donde $k$ es una constante.

Consideramos una taza de café a 95 °C en una habitación de 18 °C. Se sabe que el café se enfría a una razón de 2 °C/min cuando su temperatura es de 70 °C. Calcula el valor de la constante $k$ y brinda una gráfica de la solución de la ecuación diferencial.

```{python}
f = lambda t, y: (-1/26) * (y - 18)

t0 = 0
tf = 200
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], [95], t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="Temperatura")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 2

Brinda una aproximación de la solución del siguiente problema con valor inicial.

$$
y' = t -ty, \qquad y(1)=0.
$$
```{python}
def f(t, y):
    return t - t * y

t0 = 1
tf = 5
y0 = [0]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], y0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="Solución y(t)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 3

Para la siguiente ecuación diferencial ordinaria de segundo orden con valores iniciales

$$
u''-3u'-1.5 u= 8\,sen(3t), \qquad u(1)=-0.5, u'(1)=1
$$

Escribe el respectivo sistema de ecuaciones diferenciales de primer orden considerando que $v=u'(t)$ (velocidad) y posteriormente brinda la solución del sistema por medio de las funciones $u(t)$ y $v(t)$

<br>

Para cada uno de las ecuaciones diferenciles ordinarias de segundo y tercer orden con valores iniciales de los ejercicios 4 al 18, encuentra el respectivo sistema de primer orden y aproxima la solución, brinda gráficas de cada una de las funciones que resulten del sistema.

```{python}
#| code-fold: true

def f(t, U):
    u, v = U
    return [v, 3*v + 1.5*u + 8*np.sin(3*t)]
  
t0 = 1
tf = 3
s0 = np.array([-1.5,1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0 , t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="u(t")
plt.plot(t_values, edo_sol.y[1], label="v(t")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 4

**Oscilador armónico simple**

$$
y'' + 4y = 0,\quad y(0) = 1,\ y'(0) = 0
$$
```{python}
def f(t, U):
    u, v = U
    return [v, -4 * u]

t0 = 0
tf = 10
s0 = [1, 0]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.grid()
plt.legend()
plt.show()

```

# Ejercicio 5

**Oscilador amortiguado**

$$
y'' + 0.5y' + 4y = 0,\quad y(0) = 2,\ y'(0) = 0
$$
```{python}
def f(t, U):
    u, v = U
    return [v, -4 * u - 0.5 * v]

t0 = 0
tf = 10
s0 = [2, 0]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 6

**Oscilador forzado**

$$
y'' + 2y' + y = \cos(t),\quad y(0) = 0,\ y'(0) = 1
$$
```{python}
def f(t, U):
    u, v = U
    return [v, np.cos(t) - 2 * v - u]

t0 = 0
tf = 20
s0 = [0, 1]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.grid()
plt.legend()
plt.show()

```

# Ejercicio 7

**Ecuación no lineal de segundo orden**

$$
y'' = -y^3 + \cos(t),\quad y(0) = 0,\ y'(0) = 0
$$

```{python}
def f(t, U):
    u, v = U
    return [v, -u**3 + np.cos(t)]

t0 = 0
tf = 10
s0 = [0, 0]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 8

**Amortiguamiento cuadrático**

$$
y'' + y'^2 + y = 0,\quad y(0) = 1,\ y'(0) = -1
$$

```{python}
def f(t, U):
    u, v = U
    return [v, -np.sin(u)]  # u'' + sin(u) = 0

t0 = 0
tf = 10
s0 = [np.pi/4, 0]  # θ(0)=π/4, θ'(0)=0
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, dense_output=True)
sol_values = edo_sol.sol(t_values)

plt.plot(t_values, sol_values[0], label="θ(t)")
plt.plot(t_values, sol_values[1], label="θ'(t)")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 9

**Péndulo simple (no lineal)**

$$
\theta'' + \sin(\theta) = 0,\quad \theta(0) = \frac{\pi}{4},\ \theta'(0) = 0
$$

```{python}
def f(t, U):
    u, v = U
    return [v, -np.sin(u)]

t0 = 0
tf = 10
s0 = [np.pi/4, 0]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="θ(t)")
plt.plot(t_values, edo_sol.y[1], label="θ'(t)")
plt.grid()
plt.legend()
plt.show()

```


# Ejercicio 10

**Circuito RLC**

$$
LQ'' + RQ' + \frac{1}{C}Q = V(t),\quad Q(0) = 0,\ Q'(0) = 0,\quad V(t) = \sin(t)
$$

```{python}
#| code-fold: true

def f(t, Q, L, R, C):
    q, i = Q
    return [i, (1/L)*(np.sin(t) - R*i - q/C)] 
    
  
t0 = 0
tf = 50
s0 = np.array([0,0])
t_values = np.linspace(t0, tf, 1000)

L = 0.8
R = 2
C = 5

edo_sol = integrate.solve_ivp(f, [t0, tf], s0 , t_eval=t_values, args = [L, R, C])

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="Q(t)") 
plt.plot(t_values, edo_sol.y[1], label="I(t)")
plt.grid()
plt.legend()
plt.show()

```

```{python}
plt.figure(figsize=(8, 6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria")
plt.grid()
plt.legend()
plt.show()

```

# Ejercicio 11

**Ecuación de Bessel aproximada**

$$
x^2y'' + xy' + (x^2 - 1)y = 0,\quad y(1) = 0.5,\ y'(1) = -0.1
$$

```{python}
def f(t, U):
    u, v = U
    return [v, -v / t - (1 - 1 / t**2) * u]

t0 = 1
tf = 10
s0 = [0.5, -0.1]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 12

**No lineal con exponencial**

$$
y'' + y e^y = \sin(t),\quad y(0) = 0,\ y'(0) = 1
$$

```{python}
def f(t, U):
    u, v = U
    return [v, np.sin(t) - u * np.exp(u)]

t0 = 0
tf = 10
s0 = [0, 1]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 13

**Cuerda con fuerza externa**

$$
y'' = -\pi^2 y + \cos(2\pi t),\quad y(0) = 1,\ y'(0) = 0
$$

```{python}
def f(t, U):
    u, v = U
    return [v, -np.pi**2 * u + np.cos(2 * np.pi * t)]

t0 = 0
tf = 10
s0 = [1, 0]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 14

**EDO homogénea de tercer orden**

$$
y''' - 3y'' + 3y' - y = 0,\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = 1
$$

```{python}
def f(t, U):
    u, v, w = U
    return [v, w, 3 * w - 3 * v + u]

t0 = 0
tf = 10
s0 = [1, 0, 1]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.plot(t_values, edo_sol.y[2], label="y''(t)")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 15

**EDO de tercer orden con término no lineal**

$$
y''' + y^2 = 0,\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = 0
$$

```{python}
import numpy as np
import matplotlib.pyplot as plt
from scipy import integrate

def f(t, U):
    u, v, w = U  # u = y, v = y', w = y''
    return [v, w, -u**2]  # Sistema: u'=v, v'=w, w'=-u²

t0 = 0
tf = 10  
s0 = [1, 0, 0]  # Condiciones iniciales: y(0)=1, y'(0)=0, y''(0)=0
t_values = np.linspace(t0, tf, 1000)


edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, method='RK45', dense_output=True)
sol_values = edo_sol.sol(t_values)  # Evalúa en t_values

plt.figure(figsize=(10, 6))
plt.plot(t_values, sol_values[0], label="y(t)")
plt.plot(t_values, sol_values[1], label="y'(t)")
plt.plot(t_values, sol_values[2], label="y''(t)")
plt.grid()
plt.legend()
plt.show()


```


# Ejercicio 16

**Oscilador cúbico forzado**

$$
y''' + y'' + y^3 = \cos(t),\quad y(0) = 0,\ y'(0) = 1,\ y''(0) = 0
$$

```{python}
#| code-fold: true

def f(t, U):
    u1, u2, u3 = U
    return [u2, u3, np.cos(t) - u3 - u1**3] 
    
  
t0 = 0
tf = 5
s0 = np.array([0, 1, 0])
#t_values = np.linspace(t0, tf, 1000)


edo_sol = integrate.solve_ivp(f, [t0, tf], s0)


plt.figure(figsize=(8, 6))
plt.plot(edo_sol.y[0], label ="y(t)")
plt.plot(edo_sol.y[1], label ="y´(t)")
plt.plot(edo_sol.y[2], label ="y´´(t)")
plt.grid()
plt.legend()
plt.show()

```

# Ejercicio 17

**Ecuación tipo dispersión (Korteweg-de Vries simplificada)**

$$
y''' - 6yy' = 0,\quad y(0) = 2,\ y'(0) = 0,\ y''(0) = -1
$$

```{python}
def f(t, U):
    y, y1, y2 = U  # y1 = y', y2 = y''
    return [y1, y2, 6 * y * y1]  # Sistema: y'=y1, y1'=y2, y2'=6yy1

t0, tf = 0, 3  # Intervalo corto por no linealidad
s0 = [2, 0, -1]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, method='DOP853', dense_output=True)
sol_values = edo_sol.sol(t_values)

plt.figure(figsize=(10, 6))
plt.plot(t_values, sol_values[0], label="y(t)")
plt.plot(t_values, sol_values[1], label="y'(t)")
plt.plot(t_values, sol_values[2], label="y''(t)")
plt.grid()
plt.legend()
plt.title("Ejercicio 17: Ecuación Korteweg-de Vries simplificada")
plt.show()
```


# Ejercicio 18

**Modelo no lineal de conducción**

$$
y''' = -y y'' + y',\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = -1
$$

```{python}
def f(t, U):
    y, y1, y2 = U  # y1 = y', y2 = y''
    return [y1, y2, -y * y2 + y1]  # Sistema: y'=y1, y1'=y2, y2'=-y y2 + y1

t0, tf = 0, 5
s0 = [1, 0, -1]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, dense_output=True)
sol_values = edo_sol.sol(t_values)

plt.figure(figsize=(10, 6))
plt.plot(t_values, sol_values[0], label="y(t)")
plt.plot(t_values, sol_values[1], label="y'(t)")
plt.plot(t_values, sol_values[2], label="y''(t)")
plt.grid()
plt.legend()
plt.title("Ejercicio 18: Modelo no lineal de conducción")
plt.show()
```


# Ejercicio 19

Una persona abre una cuenta bancaria con un saldo inicial de $2000$ dólares. Sea $b(t)$ el saldo en la cuenta en el tiempo t. Así, $b(0) = 2000$. El banco paga intereses a una tasa continua del $5\%$ anual. La persona realiza depósitos en la cuenta a una tasa continua de $s(t)$ dólares por año. Supogamos que $s(0) = 500$ y que $s(t)$ está aumentando a una tasa continua del $4\%$ anual (la persona puede ahorrar más conforme aumenta su ingreso con el tiempo). Brinda el sistema de ecuaciones diferenciales ordinarias y gráfica la solución $b(t)$ y $s(t)$.

```{python}

#| code-fold: true

def f(t, X):
  x, y = X
  return [0.05*x+y, 0.04*y] 
    
  
t0 = 0
tf = 5
s0 = np.array([2000, 500])
t_values = np.linspace(t0, tf, 1000)


edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values)


plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label ="b(t)")
plt.plot(t_values, edo_sol.y[1], label ="s(t)")

plt.grid()
plt.legend()
plt.show()

```

# Ejercicio 20

Aproxima la solución del siguiente sistema de ecuaciones diferenciales ordinarias

\begin{eqnarray}
x(t) & = -6 x - 3 y\\
y(t) & = -15 x + 6y
\end{eqnarray}

donde $x(0)= 3$ y $y(0)=2$. Grafica cada una de las funciones y la trayectoria.

```{python}
def f(t, X):
    x, y = X
    return [-6 * x - 3 * y, -15 * x + 6 * y]

t0 = 0
tf = 5
s0 = [3, 2]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="x(t)")
plt.plot(t_values, edo_sol.y[1], label="y(t)")
plt.grid()
plt.legend()
plt.show()

# Trayectoria
plt.figure(figsize=(8, 6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 21

Considera la interacción de dos especies de animales en un hábitat. Considerando que las poblaciones $x(t)$ y $y(t)$ pueden ser modeladas por medio de las ecuaciones

\begin{eqnarray}
x(t) & = 1.4 x - y\\
y(t) & = -1.25 x + 3.4y
\end{eqnarray}

donde $x(0)=7$ y $y(0)=3$. Grafica cada una de las funciones que brindan la población de cada especie al tiempo $t$.

```{python}
def f(t, X):
    x, y = X
    return [1.4 * x - y, -1.25 * x + 3.4 * y]

t0 = 0
tf = 10
s0 = [7, 3]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="x(t)")
plt.plot(t_values, edo_sol.y[1], label="y(t)")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 22

Aproxima la solución del siguiente sistema de ecuaciones diferenciales ordinarias,

\begin{eqnarray}
y'_1(t) & = -6.2 +1.1 y_1 - 0.8 y_2\\
y'_2(t) & = -13.8 +2.1 y_1 -1.2 y_2
\end{eqnarray}

con los valores iniciales $y_1(0)=11$, $y_2(0)=4$. Grafica cada una de las funciones y la trayectoria.

<br>

Para cada uno de los sistemas de ecuaciones diferenciales ordinarias no lineales con valor inicial grafica las funciones y las respectivas trayectorias.

```{python}
def f(t, Y):
    y1, y2 = Y
    return [-6.2 + 1.1 * y1 - 0.8 * y2, -13.8 + 2.1 * y1 - 1.2 * y2]

t0 = 0
tf = 10
s0 = [11, 4]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="y1(t)")
plt.plot(t_values, edo_sol.y[1], label="y2(t)")
plt.grid()
plt.legend()
plt.show()


```

# Trayectoria
```{python}
plt.figure(figsize=(8, 6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 23

**Sistema logístico con depredación**

$$
\begin{cases}
\frac{dx}{dt} = x(1 - x) - xy \\
\frac{dy}{dt} = -y + xy \\
x(0) = 0.9,\quad y(0) = 0.1
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, X):
  x, y = X
  return[x*(1 - x) - x*y, -y + x*y] 
    
  
t0 = 0
tf = 1000
s0 = np.array([0.9, 0.1])
t_values = np.linspace(t0, tf, 1000)


edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="x(t)")
plt.plot(t_values, edo_sol.y[1], label="y(t)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 24

**Oscilador de Van der Pol**

$$
\begin{cases}
\frac{dx}{dt} = y \\
\frac{dy}{dt} = \mu (1 - x^2)y - x \\
x(0) = 2,\quad y(0) = 0,\quad \mu = 3
\end{cases}
$$

```{python}

#| code-fold: true

def f(t, X, mu):
  x, y = X
  return[y, mu* (1 - x**2)*y - x]
    
mu = 3  
t0 = 0
tf = 30
s0 = np.array([0.9, 0.1])
t_values = np.linspace(t0, tf, 1000)


edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values, args= (mu,))


plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label ="x(t)")
plt.plot(t_values, edo_sol.y[1], label ="y(t)")

plt.grid()
plt.legend()
plt.show()

```

# Órbita

```{python}
val_mu = np.linspace (1, 10, 5)


plt.figure(figsize=(8, 6))
for mu in val_mu:
  edo_sol= integrate.solve_ivp(f, [t0, tf],s0, t_val = t_values, args= (mu,))
  plt.plot(edo_sol.y[0], edo_sol.y[1], label = "mu*" + str(mu))


plt.grid()
plt.legend()
plt.show()

```

# Ejercicio 25

**Sistema de Lotka-Volterra**

$$
\begin{cases}
\frac{dx}{dt} = \alpha x - \beta xy \\
\frac{dy}{dt} = \delta xy - \gamma y \\
x(0) = 10,\quad y(0) = 5,\quad \alpha = 1.5,\ \beta = 1,\ \delta = 1,\ \gamma = 3
\end{cases}
$$

```{python}

#| code-fold: true

def f(t, X, alpha, beta, gamma, delta):
  x, y = X
  return [alpha*x-beta*x*y, delta*x*y- gamma*y] 
    
alpha = 1.5
beta = 1
delta = 1
gamma = 3
t0 = 0
tf = 30
s0 = np.array([10, 5])
t_values = np.linspace(t0, tf, 1000)


edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values, args= (alpha, beta, gamma, delta))


plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label ="x(t)")
plt.plot(t_values, edo_sol.y[1], label ="y(t)")

plt.grid()
plt.legend()
plt.show()

```

```{python}

plt.figure(figsize=(8, 6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label ="orbita")


plt.grid()
plt.legend()
plt.show()

```

# Ejercicio 26

**Interacción no lineal seno-coseno**

$$
\begin{cases}
\frac{dx}{dt} = \sin(y) - x^3 \\
\frac{dy}{dt} = \cos(x) - y^2 \\
x(0) = 1,\quad y(0) = 0
\end{cases}
$$

```{python}
def f(t, X):
    x, y = X
    return [np.sin(y) - x**3, np.cos(x) - y**2]

t0 = 0
tf = 10
s0 = [1, 0]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="x(t)")
plt.plot(t_values, edo_sol.y[1], label="y(t)")
plt.grid()
plt.legend()
plt.show()


```
# Trayectoria
```{python}
plt.figure(figsize=(8, 6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 27

**FitzHugh-Nagumo (modelo de neurona)**

$$
\begin{cases}
\frac{dv}{dt} = v - \frac{v^3}{3} - w + I \\
\frac{dw}{dt} = 0.08(v + 0.7 - 0.8w) \\
v(0) = -1,\quad w(0) = 1,\quad I = 0.5
\end{cases}
$$

```{python}
def f(t, X, I):
    v, w = X
    return [v - v**3 / 3 - w + I, 0.08 * (v + 0.7 - 0.8 * w)]

t0 = 0
tf = 50
s0 = [-1, 1]
I = 0.5
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, args=(I,))

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="v(t)")
plt.plot(t_values, edo_sol.y[1], label="w(t)")
plt.grid()
plt.legend()
plt.show()


```

# Trayectoria
```{python}
plt.figure(figsize=(8, 6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria")
plt.grid()
plt.legend()
plt.show()
```



# Ejercicio 28

**Sistema no autónomo**

$$
\begin{cases}
\frac{dx}{dt} = x \sin(t) + y^2 \\
\frac{dy}{dt} = -y \cos(t) + x \\
x(0) = 1,\quad y(0) = -1
\end{cases}
$$

```{python}
import numpy as np
import matplotlib.pyplot as plt
from scipy import integrate

def f(t, X):
    x, y = X
    return [x * np.sin(t) + y**2,  # x' = x*sin(t) + y²
            -y * np.cos(t) + x]    # y' = -y*cos(t) + x

t0 = 0
tf = 10  
s0 = [1, -1]  
t_values = np.linspace(t0, tf, 1000)


edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, 
                            dense_output=True, method='RK45')
sol_values = edo_sol.sol(t_values)  
plt.figure(figsize=(10, 6))
plt.plot(t_values, sol_values[0], label="x(t)")
plt.plot(t_values, sol_values[1], label="y(t)")
plt.grid()
plt.legend()
plt.show()

```
# Trayectoria
```{python}
plt.figure(figsize=(8, 6))
plt.plot(sol_values[0], sol_values[1], label="Trayectoria (x vs y)")
plt.xlabel("x(t)")
plt.ylabel("y(t)")
plt.grid()
plt.legend()
plt.show()

```


# Ejercicio 29

**Modelo epidemiológico SIR (en este caso no graficar la trayectoria)**

$$
\begin{cases}
\frac{dS}{dt} = -\beta S I \\
\frac{dI}{dt} = \beta S I - \gamma I \\
\frac{dR}{dt} = \gamma I \\
S(0) = 0.99,\quad I(0) = 0.01,\quad R(0) = 0,\quad \beta = 0.5,\ \gamma = 0.1
\end{cases}
$$

```{python}
def f(t, X, beta, gamma):
    S, I, R = X
    return [-beta * S * I, beta * S * I - gamma * I, gamma * I]

t0 = 0
tf = 100
s0 = [0.99, 0.01, 0]
beta = 0.5
gamma = 0.1
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, args=(beta, gamma))

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="S(t)")
plt.plot(t_values, edo_sol.y[1], label="I(t)")
plt.plot(t_values, edo_sol.y[2], label="R(t)")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 30

**Crecimiento logístico cruzado**

$$
\begin{cases}
\frac{dx}{dt} = x(1 - x - 0.5y) \\
\frac{dy}{dt} = y(1 - y - 0.3x) \\
x(0) = 0.5,\quad y(0) = 0.2
\end{cases}
$$

```{python}
def f(t, X):
    x, y = X
    return [x * (1 - x - 0.5 * y), y * (1 - y - 0.3 * x)]

t0 = 0
tf = 20
s0 = [0.5, 0.2]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="x(t)")
plt.plot(t_values, edo_sol.y[1], label="y(t)")
plt.grid()
plt.legend()
plt.show()


```

# Trayectoria
```{python}
plt.figure(figsize=(8, 6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 31

**Movimiento en campo no lineal**

$$
\begin{cases}
\frac{dx}{dt} = y \\
\frac{dy}{dt} = -\sin(x) - 0.5 y \\
x(0) = \pi/2,\quad y(0) = 0
\end{cases}
$$

```{python}
def f(t, X):
    x, y = X
    return [y, -np.sin(x) - 0.5 * y]

t0 = 0
tf = 20
s0 = [np.pi/2, 0]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="x(t)")
plt.plot(t_values, edo_sol.y[1], label="y(t)")
plt.grid()
plt.legend()
plt.show()


```

# Trayectoria
```{python}
plt.figure(figsize=(8, 6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria")
plt.grid()
plt.legend()
plt.show()
```


# Ejercicio 32

**Sistema no lineal acoplado**

$$
\begin{cases}
\frac{dx}{dt} = x(1 - x) - xy^2 \\
\frac{dy}{dt} = y(1 - y) - x^2y \\
x(0) = 0.8,\quad y(0) = 0.6
\end{cases}
$$

```{python}
def f(t, X):
    x, y = X
    return [x * (1 - x) - x * y**2, y * (1 - y) - x**2 * y]

t0 = 0
tf = 10
s0 = [0.8, 0.6]
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8, 6))
plt.plot(t_values, edo_sol.y[0], label="x(t)")
plt.plot(t_values, edo_sol.y[1], label="y(t)")
plt.grid()
plt.legend()
plt.show()


```
# Trayectoria
```{python}
plt.figure(figsize=(8, 6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria")
plt.grid()
plt.legend()
plt.show()
```


